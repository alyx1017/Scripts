function GetRandomNumberFromRange(Number)
	return math.random(-Number*100,Number*100) / 100
end

local Types = {}

local Hello = nil
local CF,CFA,V3 = CFrame.new,CFrame.Angles,Vector3.new

game:GetService("RunService").Heartbeat:Connect(function()
	if Flinging == true then
	    Types[1],Types[2] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame,game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity
	    local R = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame

	    R = R*CF(0,0,0)
	    R = R*CFA(math.rad(GetRandomNumberFromRange(180)),math.rad(GetRandomNumberFromRange(180)),math.rad(GetRandomNumberFromRange(180)))
	    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = R
	    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity = V3(1,1,1) * 16384
	    task.wait()
	    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = Types[1]
	    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity = Types[2]
	end
end)

Hello = hookmetamethod(game,"__index",newcclosure(function(self,key)
    if not checkcaller() then
        if key == "CFrame" and game:GetService("Players").LocalPlayer.Character and Flinging == true and game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid") and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid").Health > 0 then
            if self == game:GetService("Players").LocalPlayer.Character.HumanoidRootPart then
                return Types[1] or CF()
            elseif self == game:GetService("Players").LocalPlayer.Character.Head then
                return Types[1] and Types[1] + V3(0, game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Size / 2 + 0.5, 0) or CF()
            end
        end
    end
    return Hello(self,key)
end))
